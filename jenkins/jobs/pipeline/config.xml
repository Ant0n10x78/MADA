<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description>Pipeline de l&apos;application test myapp</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4106.v7a_8a_8176d450">
    <script>pipeline {
    agent any

    stages {
        stage(&apos;Test location&apos;) {
            steps {
                echo &apos;location&apos;
                sh &apos;pwd&apos;
            }
        }

        stage(&apos;T√©l√©chargement du repo&apos;) {
            steps {
                echo &apos;T√©l√©chargement du repo&apos;
                sh &apos;&apos;&apos;
                    if [ -d &quot;app&quot; ]; then
                        echo &quot;Le dossier app existe d√©j√†, suppression...&quot;
                        rm -rf app
                    fi
                    git clone http://gitlab:8929/root/app
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Audit Dockerfile - Hadolint&apos;) {
            steps {
                echo &apos;Audit du Dockerfile avec Hadolint&apos;
                sh &apos;&apos;&apos;
                    if [ -f app/Dockerfile ]; then
                        hadolint app/Dockerfile || { echo &quot;Des probl√®mes ont √©t√© d√©tect√©s dans le Dockerfile&quot;; exit 1; } 
                        echo &quot;‚úÖ Dockerfile conforme selon Hadolint.&quot;
                    else
                        echo &quot;Aucun Dockerfile trouv√© dans app/&quot;
                        exit 1
                    fi
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Build&apos;) {
            steps {
                echo &apos;Build de l‚Äôimage Docker de l‚Äôapp&apos;
                sh &apos;docker build -t myapp:latest ./app&apos;
            }
        }

        stage(&apos;Test&apos;) {
            steps {
                echo &apos;Tests de l‚Äôapplication&apos;
                sh &apos;docker run --rm myapp:latest npm test&apos;
            }
        }

        stage(&apos;Audit de s√©curit√© - npm audit&apos;) {
            steps {
                echo &apos;Audit de s√©curit√© des d√©pendances Node.js&apos;
                sh &apos;&apos;&apos;
                    cd app
                    npm install
                    npm audit --audit-level=high
                &apos;&apos;&apos;
            }
        }

        stage(&apos;Audit de code - ESLint&apos;) {
            steps {
                echo &apos;üîç Audit du code source avec ESLint&apos;
                sh &apos;&apos;&apos;
                    cd app

                    if [ ! -f .eslintrc.json ]; then
                        echo &quot;‚ö†Ô∏è  Aucun fichier .eslintrc.json trouv√©. Initialisation automatique...&quot;
                        npx eslint --init || true
                    fi

                    echo &quot;üß™ Lancement de l‚Äôanalyse ESLint...&quot;
                    eslint . || { echo &quot;‚ùå ESLint a d√©tect√© des probl√®mes.&quot;; exit 1; }

                    echo &quot;‚úÖ Audit ESLint termin√© sans erreur.&quot;
                &apos;&apos;&apos;
            }
        }

        stage(&apos;V√©rification manuelle avant d√©ploiement&apos;) {
            steps {
                script {
                    def proceed = input(
                        id: &apos;Approval&apos;, message: &apos;D√©ployer en production ?&apos;, parameters: [
                            [$class: &apos;BooleanParameterDefinition&apos;, defaultValue: false, description: &apos;Valider le d√©ploiement&apos;, name: &apos;Approuver&apos;]
                        ]
                    )
                    if (!proceed) {
                        error(&quot;D√©ploiement annul√©.&quot;)
                    }
                }
            }
        }

        stage(&apos;Deploy to Prod&apos;) {
            steps {
                echo &apos;D√©ploiement de l‚Äôimage Docker&apos;
                sh &apos;&apos;&apos;
                    docker stop myapp || true
                    docker rm myapp || true
                    docker run -d -p 3000:3000 --name myapp myapp:latest
                &apos;&apos;&apos;
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>